"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   achievementAPI: function() { return /* binding */ achievementAPI; },\n/* harmony export */   analyticsAPI: function() { return /* binding */ analyticsAPI; },\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   auditLogsAPI: function() { return /* binding */ auditLogsAPI; },\n/* harmony export */   categoryAPI: function() { return /* binding */ categoryAPI; },\n/* harmony export */   certificateAPI: function() { return /* binding */ certificateAPI; },\n/* harmony export */   courseAPI: function() { return /* binding */ courseAPI; },\n/* harmony export */   instructorAPI: function() { return /* binding */ instructorAPI; },\n/* harmony export */   progressAPI: function() { return /* binding */ progressAPI; },\n/* harmony export */   userAPI: function() { return /* binding */ userAPI; }\n/* harmony export */ });\n/* harmony import */ var _mysql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mysql */ \"./src/lib/mysql.ts\");\n// API Service for Database Operations\n// This service handles all HTTP requests to your backend server\n\n// Generic API request function with authentication\nconst apiRequest = async function(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const url = \"\".concat(_mysql__WEBPACK_IMPORTED_MODULE_0__.API_BASE_URL).concat(endpoint);\n    // Check if we're on the client side before accessing localStorage\n    const token =  true ? localStorage.getItem(\"forward_africa_token\") : 0;\n    const defaultOptions = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...token && {\n                \"Authorization\": \"Bearer \".concat(token)\n            },\n            ...options.headers\n        },\n        ...options\n    };\n    try {\n        const response = await fetch(url, defaultOptions);\n        if (response.status === 401) {\n            // Clear auth data and redirect to login (only on client side)\n            if (true) {\n                localStorage.removeItem(\"forward_africa_token\");\n                localStorage.removeItem(\"forward_africa_user\");\n                window.location.href = \"/login\";\n            }\n            throw new Error(\"Authentication required\");\n        }\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>({}));\n            throw new Error(errorData.error || \"HTTP error! status: \".concat(response.status));\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(\"API request failed:\", error);\n        throw error;\n    }\n};\n// User API\nconst userAPI = {\n    // Get all users\n    getUsers: ()=>apiRequest(\"/users\"),\n    // Get user by ID\n    getUser: (userId)=>apiRequest(\"/users/\".concat(userId)),\n    // Get user by email\n    getUserByEmail: (email)=>apiRequest(\"/users/email/\".concat(email)),\n    // Create new user\n    createUser: (userData)=>apiRequest(\"/users\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        }),\n    // Update user\n    updateUser: (userId, userData)=>apiRequest(\"/users/\".concat(userId), {\n            method: \"PUT\",\n            body: JSON.stringify(userData)\n        }),\n    // Delete user\n    deleteUser: (userId)=>apiRequest(\"/users/\".concat(userId), {\n            method: \"DELETE\"\n        })\n};\n// Course API\nconst courseAPI = {\n    // Get all courses\n    getAllCourses: ()=>apiRequest(\"/courses\"),\n    // Get course by ID\n    getCourse: (courseId)=>apiRequest(\"/courses/\".concat(courseId)),\n    // Get featured courses\n    getFeaturedCourses: ()=>apiRequest(\"/courses/featured\"),\n    // Get courses by category\n    getCoursesByCategory: (categoryId)=>apiRequest(\"/courses/category/\".concat(categoryId)),\n    // Create new course\n    createCourse: (courseData)=>apiRequest(\"/courses\", {\n            method: \"POST\",\n            body: JSON.stringify(courseData)\n        }),\n    // Update course\n    updateCourse: (courseId, courseData)=>apiRequest(\"/courses/\".concat(courseId), {\n            method: \"PUT\",\n            body: JSON.stringify(courseData)\n        }),\n    // Delete course\n    deleteCourse: (courseId)=>apiRequest(\"/courses/\".concat(courseId), {\n            method: \"DELETE\"\n        })\n};\n// Category API\nconst categoryAPI = {\n    // Get all categories\n    getAllCategories: ()=>apiRequest(\"/categories\"),\n    // Get category by ID\n    getCategory: (categoryId)=>apiRequest(\"/categories/\".concat(categoryId)),\n    // Create new category\n    createCategory: (categoryData)=>apiRequest(\"/categories\", {\n            method: \"POST\",\n            body: JSON.stringify(categoryData)\n        }),\n    // Update category\n    updateCategory: (categoryId, categoryData)=>apiRequest(\"/categories/\".concat(categoryId), {\n            method: \"PUT\",\n            body: JSON.stringify(categoryData)\n        }),\n    // Delete category\n    deleteCategory: (categoryId)=>apiRequest(\"/categories/\".concat(categoryId), {\n            method: \"DELETE\"\n        })\n};\n// Instructor API\nconst instructorAPI = {\n    // Get all instructors\n    getAllInstructors: ()=>apiRequest(\"/instructors\"),\n    // Get instructor by ID\n    getInstructor: (instructorId)=>apiRequest(\"/instructors/\".concat(instructorId)),\n    // Get instructor courses\n    getInstructorCourses: (instructorId)=>apiRequest(\"/instructors/\".concat(instructorId, \"/courses\")),\n    // Create new instructor\n    createInstructor: (instructorData)=>apiRequest(\"/instructors\", {\n            method: \"POST\",\n            body: JSON.stringify(instructorData)\n        }),\n    // Update instructor\n    updateInstructor: (instructorId, instructorData)=>apiRequest(\"/instructors/\".concat(instructorId), {\n            method: \"PUT\",\n            body: JSON.stringify(instructorData)\n        }),\n    // Delete instructor\n    deleteInstructor: (instructorId)=>apiRequest(\"/instructors/\".concat(instructorId), {\n            method: \"DELETE\"\n        })\n};\n// User Progress API\nconst progressAPI = {\n    // Get user progress for a course\n    getUserProgress: (userId, courseId)=>apiRequest(\"/progress/\".concat(userId, \"/\").concat(courseId)),\n    // Get all user progress\n    getAllUserProgress: (userId)=>apiRequest(\"/progress/\".concat(userId)),\n    // Update user progress\n    updateProgress: (userId, courseId, progressData)=>apiRequest(\"/progress/\".concat(userId, \"/\").concat(courseId), {\n            method: \"PUT\",\n            body: JSON.stringify(progressData)\n        }),\n    // Create user progress\n    createProgress: (progressData)=>apiRequest(\"/progress\", {\n            method: \"POST\",\n            body: JSON.stringify(progressData)\n        })\n};\n// Certificate API\nconst certificateAPI = {\n    // Get user certificates\n    getUserCertificates: (userId)=>apiRequest(\"/certificates/\".concat(userId)),\n    // Get certificate by ID\n    getCertificate: (certificateId)=>apiRequest(\"/certificates/id/\".concat(certificateId)),\n    // Verify certificate\n    verifyCertificate: (verificationCode)=>apiRequest(\"/certificates/verify/\".concat(verificationCode)),\n    // Create certificate\n    createCertificate: (certificateData)=>apiRequest(\"/certificates\", {\n            method: \"POST\",\n            body: JSON.stringify(certificateData)\n        })\n};\n// Achievement API\nconst achievementAPI = {\n    // Get user achievements\n    getUserAchievements: (userId)=>apiRequest(\"/achievements/\".concat(userId)),\n    // Create achievement\n    createAchievement: (achievementData)=>apiRequest(\"/achievements\", {\n            method: \"POST\",\n            body: JSON.stringify(achievementData)\n        }),\n    // Update achievement progress\n    updateAchievementProgress: (achievementId, progress)=>apiRequest(\"/achievements/\".concat(achievementId, \"/progress\"), {\n            method: \"PUT\",\n            body: JSON.stringify({\n                progress\n            })\n        })\n};\n// Analytics API\nconst analyticsAPI = {\n    // Get platform statistics\n    getPlatformStats: ()=>apiRequest(\"/analytics/platform\"),\n    // Get detailed analytics\n    getDetailedAnalytics: ()=>apiRequest(\"/analytics/detailed\"),\n    // Get user statistics\n    getUserStats: (userId)=>apiRequest(\"/analytics/user/\".concat(userId)),\n    // Get course statistics\n    getCourseStats: (courseId)=>apiRequest(\"/analytics/course/\".concat(courseId))\n};\n// Audit Logs API\nconst auditLogsAPI = {\n    // Get all audit logs with optional filtering\n    getAuditLogs: (filters)=>{\n        const params = new URLSearchParams();\n        if (filters) {\n            Object.entries(filters).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) {\n                    params.append(key, value.toString());\n                }\n            });\n        }\n        return apiRequest(\"/audit-logs?\".concat(params.toString()));\n    },\n    // Create audit log\n    createAuditLog: (auditData)=>apiRequest(\"/audit-logs\", {\n            method: \"POST\",\n            body: JSON.stringify(auditData)\n        })\n};\n// Export all APIs\nconst api = {\n    user: userAPI,\n    course: courseAPI,\n    category: categoryAPI,\n    instructor: instructorAPI,\n    progress: progressAPI,\n    certificate: certificateAPI,\n    achievement: achievementAPI,\n    analytics: analyticsAPI,\n    auditLogs: auditLogsAPI\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/api.ts\n"));

/***/ })

});